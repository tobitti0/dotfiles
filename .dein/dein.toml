[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
    let NERDTreeShowHidden=1
    nnoremap <silent><C-a> :NERDTreeToggle <CR>
 autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
depends = 'vim-airline'
hook_add = '''
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#tabline#fnamemod = ':t'
    let g:airline_powerline_fonts = 1
    let g:bufferline_echo = 0
    let g:airline#extensions#tabline#buffer_idx_format = {
      \ '0': '0 ',
      \ '1': '1 ',
      \ '2': '2 ',
      \ '3': '3 ',
      \ '4': '4 ',
      \ '5': '5 ',
      \ '6': '6 ',
      \ '7': '7 ',
      \ '8': '8 ',
      \ '9': '9 '
      \}
'''

[[plugins]]
repo = 'tpope/vim-markdown'
hood_add = '''
  let g:markdown_fenced_langulages = ['html', 'python', 'cpp', 'bash=sh', 'toml']
'''

[[plugins]]
repo = 'previm/previm'
hook_add = '''
  let g:previm_open_cmd = '/mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe'
  let g:previm_wsl_mode = 1
  let g:previm_enable_realtime=1
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
    let g:rainbow_conf = {
      \'separately': {
        \'nerdtree': 0,
      \	}
    \}
'''

[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ['html', 'xhtml', 'javascript', 'typescript', 'javascript.jsx', 'typescript.tsx']
hook_add = '''
  let g:closetag_filenames='*.html'
  let g:closetag_xhtml_filenames='*.jsx,*.tsx,*.vue'
  let g:closetag_filetypes='html'
  let g:closetag_xhtml_filetypes='jsx,tsx,javascript.jsx,typescript.tsx,vue'
  let g:closetag_emptyTags_caseSensitive=1
  let g:closetag_shortcut='>'
'''

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
  set background=dark
  colorscheme iceberg
'''
[[plugins]]
repo = 'edkolev/tmuxline.vim'
hook_add = '''
  let g:airline#extensions#tmuxline#enabled = 0 "change 1 for genarate tmuxline.conf
  let g:airline#extensions#tmuxline#snapshot_file = "~/dotfiles/.tmux/tmuxline.conf"
  if &ambiwidth=="double"
      let g:tmuxline_separators = {
        \ 'right' : ' ',
        \ 'right_alt' : '  ',
        \ 'space' : ' '
      \}
  endif
  let g:tmuxline_preset = {
    \'a'    : '#S',
    \'b'    : '#W',
    \'c'    : ['#(whoami)', '#(uptime | cud -d " " -f 1,2,3)'],
    \'win'  : ['#I', '#W'],
    \'cwin' : ['#I', '#W', '#F'],
    \'x'    : '#{cpu_icon}#{cpu_percentage}',
    \'y'    : [' %a','%Y/%m/%d','%H:%M:%S'],
    \'z'    : ' #H',
    \'options'  :{'status-interval' : 1 }
    \}
  let g:tmuxline_theme = 'iceberg'
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
  if empty(globpath(&rtp, 'autoload/lsp.vim'))
    finish
  endif

  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <f2> <plug>(lsp-rename)
    inoremap <expr> <cr> pumvisible() ? "\<c-y>\<cr>" : "\<cr>"
  endfunction

  augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
  command! LspDebug let lsp_log_verbose=1 | let lsp_log_file = expand('~/lsp.log')

  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:asyncomplete_auto_popup = 1
  let g:asyncomplete_auto_completeopt = 0
  let g:asyncomplete_popup_delay = 2000
  let g:lsp_text_edit_enabled = 1
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = 'let g:rustfmt_autosave = 1'

